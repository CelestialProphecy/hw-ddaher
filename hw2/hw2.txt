a. README.md should read that the files are tracked and unmodified because the files were grabbed from the repo and were not changed (unmodified).

b. fun_problem is untracked (not unmodified because check the diagram)
readme is modified

c. both staged

d. both are unmodified when committed and then are modified when echo is called

e. readme is staged and funproblem is unmodified since checkout discards changes inworking directory.
   contents of fun problem is NOTHING because so far so good was called but then checkout discarded that addition
   
f. Readme is modified because "Fancy git move" was appended to Readme


Problem 2

Reviewed



Problem 3

a. O(n*logn)
Assuming worst case for the if statement, let's assume the array is filled with all the values equal to 0. This permits the if statement to go through every time to the inner for loop. The inner loop starts at j=1 to i and increments exponentially at 2^n which means it starts at j=1 and goes to log(i). The sum of this for loop is the {sum from j=1 to log(i) of 1} because the work inside that for loop takes O(1) time. Thus, that sum results in log(n) since 1 is added to itself log(i) times until i becomes n. Then, the first for loop starts at i=0 to n, so the overall sum becomes the {sum from i=0 to n of log(n)} which is log(n) added to log(n) n times. That is simplified to n*log(n). Thus, the big O of the overall nested for loop is O(n*log(n)).


b* O(n^2)
Looking at the inner for loop, k=j which means that we must look at the for loop and if statement that come before. the for loop before starts at j=0 and goes to n which is a runtime of O(n). Then, the if statement runs n/i times because it depends what the value of i is. If i is 1 and n is 10, n/i = 10. This is because the if statement will run every time because every number from j=0 to j=n=10 modulus 1 is 0. However, if i is 2 and n is 10, the if statement will only run 10/2 = 5 times. The same occurs as i increments, so the if statement runs n/i times.
Thus, we must take the sum from j=0 to n/i of n-j times (n-j because k starts at j until n). This sum can be split up into the {sum of j=0 to n/i of n} - {sum of j=0 to n/i of j}. The sum of j=0 to n/i of j can be translated into an arithmetic sequence = [(n/i)*(n/i + 1)]/2. Thus, the {sum of j=0 to n/i of n} = n^2/i and we can ignore the [(n/i)*(n/i + 1)]/2 because n^2/i is dominant in the long-term so the big O is O(n^2/i) at this point. This means that from starting from the second for loop with j=0 until the end has a big O of (n^2/i). Moving to the first for loop, i=1 until n but is incremented exponentially at 2^n. This also can be translated as i=1 until i<logn and i is incremented by 1. This can be summed as i=1 to log(n) of n^2/i. It is n^2/i due to the previous big O explanation of the loops afterwards. This can be simplified to n^2 * {the sum from i=1 to logn of 1/i}. The sum 1/i is added from i=1 to logn which ends up being a constant sum. This sum is multiplied by n^2/i which is a final big O of O(n^2).

c. O(n^2) 
When the for loop is entered, a new node is created and the for loop builds a linked list. The for loop runs from i=1 to n times which is big O notation of O(n), meaning the linked list is size n. Each time the for loop runs, the data stored in curr is shifted from 1 over i times. Thus, each consective data value will be 1 to 10 to 100 to 1000 and so on until the data value equals 2^n times when i reaches size n. Another way to say that is the binary values grow exponentially from 1 to 2 to 4 to 2^n. Next, the while loop is entered when curr is equal to the head. Inside the for loop, i starts at 0 and runs curr->data times which is equal to 2^n as explained earlier. The command inside the for loop sets curr->data equal to itself/2 which over time after it runs curr->data times (2^n times), the for loop actually runs log base 2 (2^n) = n times since the command is dividing itself by 2 every time. Then, the curr moves over to the next node and this for loop repeats n times since the linked list was built until size n as described earlier. Thus, because the for loop inside the while loop runs at O(n), the while loop runs n times O(n), the overall big O inside the while loop is O(n)*O(n) = O(n^2) which is added to the O(n) of the first for loop which is overall still O(n^2). 

d.O(n)


Problem 4

1. A map would be perfect where the key value is the zip code which holds values for all voting statistics. Using a map would allow for speedy access by just choosing a zip code and finding all the voting statistics attached to that zip code.


2. A list of strings of the names of the students would be simple enough to know which students solved the problem.

3. A list of strings stored in an array where the index of the array is the supposed pokeindex. Because arrays are index 0 to n, the array+1 would be the pokeindex number since the array is an index number behind the pokeindex.

4. A map of maps would be perfect for this where the name of the movie would be the key and its values are a map of years and those values are the reviews.


Problem 5

I will define in and out as #in and #out to make it visible in the text.

Basically, this recursion reverses the linked list to make it 5,4,3,2,1.
#in points to 1,2,3,4,5 and when it is called, it and its next do not point to NULL, so out is set equal to funcA(#in->next). Before we continue, #in still points to the beginning from 1-5 and #out points to 2-5 because #in->next was the argument inside funcA when it was set equal to #out.

Now, funcA is called until in points to 5 and its next is NULL, so it skips the if statement and returns #in. To summarize, #out was set = to funcA when the list was 2,3,4,5 then 3,4,5 then 4,5 then 5. Then, #in returns #in because when #in points to 5, its next is NULL and ends up returning #in. Thus, when #in returns, it reverts back to pointing at 4,5 while #out still points to the position of 5.

Now, funcB is called with the arguments(#in, #out) which #in points to 4,5 and #out points to 5. In funcB, #out = #in2 so #in2's next is NULL since it is only pointing at 5, so it sets in2's next pointer to in1. Thus, #in2 points to 5 which points to #in1 (4,5) so the whole list inside funcB is 5,4,5. FuncB is exited and the program continues to the next line after calling funcB which sets #in's next to NULL. #in points to 4,5 so setting #in->next = NULL makes #in point to 4,NULL and removes the pointer to 5.
Then, #out is returned. #out originally carried 5,4,5 after leaving funcB, but because out's next was set equal to #in1 in funcB, this means if #in1/#in changes, then #out must change. Thus, because #in only points to 4,5 now in this level of recursion, out no longer points to 5,4,5 but only 5,4,NULL.

After out is returned, the recursion kicks back up a level and enters funcB when #in is pointing at 3,4,NULL. (Remember, it is no longer 3,4,5 because of the previous statement to set the next to NULL when #in was pointing at 4). FuncB is entered with the arguments #in which points to 3,4 and #out which points to 5,4. #in2's next is not null so funcB is called again with #in1 and #in2->next which now points to just 4. Now #in2's next is NULL, so #in2->next = #in1 meaning that 4 points to the start of #in1 which is 3,4 so the list looks like 4,3,4. Then, the recursion returns to the previous funcB call where the pointer starts at 5 and, while it previously pointed only to 5->4, now it points to 5,4,3,4. FuncB then exits and the program continues to the next statement where #in's next is set to NULL. This means that #in which pointed to 3,4 now points just to 3. Then, #out is returned which no longer points to 5,4,3,4 but just only 5,4,3 because when #in changes its pointer or its next pointer, it also affects what #out points to because it is the same list.

The recursion continues until #out points to 5,4,3,2,1.


5.






