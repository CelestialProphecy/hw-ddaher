Problem 1 (Course Policies, 10%)

Part a

1. looking up concepts, syntax, instructions is fine because you are learning

4. Asking course staff for help is good. However, they won't help TOO much

8. This is fine because the work is not graded, so you can use it as a 
learning experience.


Part b

2,3,4,5 It is recommended to use emacs, Eclipse, Sublime, and Microsoft Visual 
Studio. Stay away from notepad and gedit.


Part c

2. Each student has 3 late days of which only 1 can be used per HW


Part d

2. Complete the normal homework submission form
4. Start the next assignment sooner


Problem 2 (Git, 10%)

Part a

1. Git Bash (Windows)
3. Terminal (Mac or Linux)

Part b

1. git add hw1q2b.cpp
2. git log

Part c

1. "Git commit" by itself without the "-m" will prompt 
you to write a message. Git commit makes the file part of repository 
history but does not push the file to the server.


Problem 3

Reviewed


Problem 4

The end contents of in will be [5,1,1,1,1] 
When the program runs, n
is larger than 0 so it calls itself funcA(in, n-1) and continues that
cycle until n = 0 where it then returns in[0], the number in the
0th index, which is 1. Thus, the recursion then kicks back to the 
previous call where n=1 and it moves on to return
funcB(in, n-1) and n-1 = 0. 

Before I continue the explanation, we need
to understand that in[0] is ALWAYS set to funcA as seen when funcA is
called. Thus, no matter how the array changes in funcB, everytime funcB
returns, in[0] will be reset to 1 (the value in the original array when
funcA is called). Thus, in funcB, temp is set to in[0] = 1
everytime. Knowing that, we can move on.

In funcB, it creates a temp variable and sets it equal to in[0] which
for the first call is 1. Then because x = 0, the content in the first index
in[0] which is 1 replaces the content in the 0th index in[0]. Here, not
much occurs because x = 0 where in[x] = in[0]. the array looks like:
[1,2,3,4,5]. funcB ends and returns temp = 1. 

Now, funcB runs again with n-1 = 1 so 
x = 1. The temp variable is set to in[0] = temp = 1 and then in[x] = 2 
overwrites in[0]. Then temp overwrites in[x] so now, because x=1,
in[1] = 1. The array looks like: [2,1,3,4,5].

Next, funcB is called with n-1=2, so x = 2. in[0] which is now STILL 1
because of the explanation earlier is written into the temp variable. 
Then, in[x] which is in[2] = 3 is written into in[0] so now in[0] = 3. 
Then, temp=1 overwrites in[2] so now in[2] = 1.
Temp is returned and the array looks like: [3,1,1,4,5].

Basically, the initial index swaps with every next index and then the
intial index is rewritten to hold the value 1.
Now to continue:

When funcB is called again, x = 3 and temp = 1. The cycle continues and
makes the initial index value 4 and makes in[3] = 1. Temp is returned
and the last funcB is called. Now, the array looks
like [4,1,1,1,5].

Lastly, funcB is called with x = 4 which is the last index in the array in
and temp = 1. The initial index and the last index swap so now the array
looks like [5,1,1,1,1]. Temp is returned and the recursion is done.
5 calls were made to funcB, array in was manipulated, and the recursion
has finished with a final in array [5,1,1,1,1].
